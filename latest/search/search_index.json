{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CyVerse GERI-NEON Training!","text":""},{"location":"#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>Proficiently organize your lab, external and internal communications, and teach and conduct research with open source software</li> <li>Ability to scale out computations from laptop to the cloud and High Performance Computing/High Throughput Computing systems</li> <li>Skillfully manage your research data through the data lifecycle </li> <li>Join a larger community of Open Science practitioners</li> <li>Be an Advocate for Open Science in your professional circles and communities</li> </ul> <p>By working through an example project relevant to your interests, you will practice open science skills using CyVerse, GitHub, R or Python, and other resources. At the end of the course, you and your team will present a plan for how to integrate open science into your research, lab, or other areas of your choosing.</p> <p>Funding and Citations:</p> <p>CyVerse is funded by the Arizona Board of Regents and the US National Science Foundation under Award Numbers: </p> <p> </p> <p>The CyVerse Zenodo Community has published, citable versions of CyVerse Learning materials: </p> <p></p> <p>Please cite CyVerse appropriately when you make use of our resources; see CyVerse citation policy.</p> <p> </p>"},{"location":"cyverse/","title":"How to use CyVerse","text":"<p> Imagine, Your Lab in the Cloud</p> <p>Welcome to scientific research computing in the 21<sup>st</sup> century! </p> <p>While using a mouse in a Graphical User Interface (GUI) is more familiar to most of us, the real power of reproducible science comes from the Command Line Interface (CLI). </p> <p>The CLI allows you to give precise, text-based instructions to a computer, automating tasks and managing massive datasets in ways a GUI cannot.</p> <p>In this lesson, you'll learn to use the CLI on CyVerse, a powerful, cloud-based platform designed for science. Instead of installing complex software on your own machine, you'll use CyVerse to access everything you need right from your web browser. </p>"},{"location":"cyverse/#what-is-cyverse","title":"What is CyVerse?","text":"<p>CyVerse is not just one tool, but a comprehensive cyberinfrastructure built to support researchers throughout the entire data lifecycle (Swetnam et al. 2024). </p> <p>It's composed of four main integrated platforms:</p> <p>Data Management: At its core, CyVerse provides a robust, large-scale data storage system. It allows you to store, manage, and share massive datasets securely and provides tools for high-speed data transfer. We'll be using this Data Store today.</p> <p>Discovery Environment (DE): The DE is a web-based portal for accessing scientific tools and workflows. You can use its intuitive interface to launch analyses, from simple virtual machines to complex, multi-step bioinformatics pipelines, without needing to be an expert in high-performance computing.</p> <p>Cloud Native Services: For more advanced users, CyVerse offers a container-based, composable infrastructure that runs on NSF's Jetstream-2 Cloud, AWS, GCloud, or Azure. These Infrastructure as Code (IaC) tools allows you to deploy your own custom applications and services at scale, giving you greater flexibility and control over your computational environments.</p> <p>Artificial Intelligence (AI/ML): AI-Verde, provides access to cutting-edge hardware, including GPUs, and pre-configured tools to support generative AI (LLMs). In the Discovery Environment, and on Jetstream-2, we support a wide array of machine learning and artificial intelligence research. These platforms makes it easier to train, test, and deploy AI models on large datasets.</p> <p>Today, we will use the Data Store to move files and the Discovery Environment to launch virtual analyses. We will briefly introduce generative AI tools. Next week, we'll focus on the AI/ML platforms to run a large language model and practice prompt engineering in more depth.</p>"},{"location":"cyverse/#cyverse-account-creation","title":"CyVerse Account Creation","text":"<ol> <li> <p>Create your account: https://user.cyverse.org</p> <p>You should be prompted to set a valid email address, an then create a password. For the sake of this workshp, use the same email address you gave to GERI-NEON staff.</p> </li> <li> <p>Enroll in the GERI-NEON workshop: https://user.cyverse.org/workshops/194</p> <p>As part of GERI-NEON, you will be granted special access to CyVerse. </p> <p>We have pre-registered the email account you enrolled with GERI-NEON in the workshop enrollment form. </p> <p>AFTER you have created and verified your CyVerse account, go to the Workshops in the User Portal and find the GERI-NEON workshop. Click on 'Enroll' to be automatically added to the workshop.</p> <p>Your account will be promoted and you will be given access to the Discovery Environment's interactive applications (which we will use in the next section)</p> </li> <li> <p>Log into the Discovery Environment (DE): https://de.cyverse.org</p> </li> </ol>"},{"location":"cyverse/#discovery-environment-tour","title":"Discovery Environment Tour","text":"<p>If this is your first time logging into the DE, allow the Tour to show you all of the GUI features.</p>"},{"location":"cyverse/#starting-a-vice-app","title":"Starting a VICE App","text":"<p>Let's start out with the  Cloud Shell</p> <p>Interactive Apps (GUI) can be found in the Featured Apps list</p> <p>Launch a Cloud Shell from the list or from the quick launch icon in the Tool Bar by clicking on the  icon.</p>"},{"location":"cyverse/#the-unix-shell","title":"The Unix Shell","text":"<p>The CLI sees the computer stripped down to only a Terminal from where one can run powerful commands executed through the Shell.</p> <p>Though there are technical differences between them, the terms Command Line Interface, Terminal, Shell, and BASH will be used more or less interchangeably throughout the lesson. </p> <p> </p> <p>Attention  Windows users</p> <p>Much of what we are going to be teaching is based on open-source software which operates on cloud and is incompatible with Windows OS.</p> <p>Unix-based systems such as Linux  Ubuntu and  MacOS X, as many scientific tools require a Unix Operating System (OS). </p> <p>There are a number of software that allow  Windows users to execute Unix commands, however we recommend the use of  Windows Subsystem for Linux (WSL) 2.0.</p> Quickstart installation of Window's WSL <p>A system reboot is necessary</p> <ol> <li>Open  PowerShell in Administrator mode (open  Search and look for PowerShell, right click and select \"Run as Administrator\")</li> <li>type <code>wsl --install</code></li> <li>Restart your machine</li> <li>Open  Search and open  WSL; create a username and password, wait for it to finish setting up (should take a few minutes)</li> <li>You're now ready to use  Linux on your Windows Machine!</li> </ol> Where is the WSL Home folder? <p>The Home folders for Linux and Windows are different. The Windows path to the  WSL home folder is <code>\\\\wsl$\\Ubuntu\\home\\&lt;username&gt;</code>.</p> <p>We suggest creating a bookmark in your Windows machine to allow quicker access to the  Linux partition (for quicker access to files).</p> <p>To quickly open the folder, open  WSL and execute <code>explorer.exe .</code>. This will open a folder in Windows at the Linux Home folder. </p>"},{"location":"cyverse/#managing-your-cyverse-data-with-gocommands","title":"Managing Your CyVerse Data with GoCommands","text":"<p>Before launching an analysis, you need a way to move data between your personal computer and the CyVerse Data Store. The best tool for this is <code>gocmd</code>, a command-line client written by CyVerse research software engineers in Google's Go langauge. </p> <p>You can install and run <code>gocmd</code> in your computer's terminal to move files from your computer(s) into CyVerse. You can also use <code>gocmd</code> to move files around CyVerse Data Store.</p> <ol> <li>Install and Configure GoCommands</li> </ol> <p>Installation instructions vary by operating system (Windows, macOS, Linux). Please follow the complete, up-to-date guide on the CyVerse Learning site.</p> <p>GoCommands Installation Guide</p> <p>Visit the official GoCommands Installation and Configuration Guide and follow the steps for your operating system.</p> <p>Optionally, add the <code>gocmd</code> binary to your <code>PATH</code> environmental variable or <code>.bashrc</code></p> <p>The most important step is running <code>gocmd init</code> to connect the tool to your CyVerse account.</p> <p>You will be queried to enter CyVerse specific information for the Data Store. You can leave the default values for the configuration. </p> Configuration Key Value <code>irods_host</code> <code>data.cyverse.org</code> <code>irods_port</code> <code>1247</code> <code>irods_zone_name</code> <code>iplant</code> <code>irods_user_name</code> <code>&lt;CyVerse Username&gt;</code> <code>irods_user_password</code> <code>&lt;CyVerse Password&gt;</code> <p>Use these credentials for <code>anonymous</code> access to the Data Store:</p> Configuration Key Value <code>irods_user_name</code> <code>anonymous</code> <code>irods_user_password</code> (leave empty) <pre><code>graph LR\n    subgraph \"Your Local Machine\"\n        direction LR\n        Local_PC[(\"\ud83d\udcbb&lt;br&gt;Local Computer\")]\n        Local_Files[\"Local Files&lt;br&gt;(e.g., my_data.csv)\"]\n    end\n\n    subgraph \"CyVerse Cloud Platform\"\n        direction TB\n\n        subgraph \"Jupyter Lab (Ephemeral Storage)\"\n            direction TB\n            VM[\"\u2699\ufe0f Jupyter Lab VM\"]\n            VM_FS[\"VM Filesystem&lt;br&gt;(/home/jovyan, etc.)\"]\n            VM_Mount[\"/data-store&lt;br&gt;(Mount Point)\"]\n            VM --&gt; VM_FS\n            VM --&gt; VM_Mount\n        end\n\n        subgraph \"CyVerse Data Store (Persistent iRODS Storage)\"\n            direction TB\n            iRODS[(\"\u2601\ufe0f&lt;br&gt;iRODS Data Store\")]\n            iRODS_Home[\"/iplant/home/&amp;lt;user&amp;gt;\"]\n            iRODS_Shared[\"/iplant/home/shared\"]\n            iRODS --&gt; iRODS_Home\n            iRODS --&gt; iRODS_Shared\n        end\n\n        VM_Mount -- \"Mounted via&lt;br&gt;Kubernetes CSI Driver\" --&gt; iRODS\n    end\n\n    Local_PC -- \"Transfer via&lt;br&gt;gocmd put/get\" --&gt; iRODS\n\n    classDef system fill:#f0f9ff,stroke:#0ea5e9,stroke-width:2px;\n    classDef storage fill:#eef2ff,stroke:#6366f1;\n    classDef connector stroke-dasharray: 5 5;\n    class Local_PC,VM,iRODS system;\n    class Local_Files,VM_FS,VM_Mount,iRODS_Home,iRODS_Shared storage;</code></pre> <ol> <li>Transfer Data</li> </ol> <p>Once installed and configured, you can manage your files from your local terminal. Here are the essential commands:</p> Command Explanation <code>gocmd ls</code> list the contents of your home directory in the CyVerse Data Store. <code>gocmd put &lt;local_file&gt;</code> put (upload) a file from your computer to your CyVerse home directory. <code>gocmd get &lt;cyverse_file&gt;</code> get (download) a file from your CyVerse home directory to your computer. <p>Example: Let's say you have a file my_data.csv on your computer that you want to analyze in CyVerse.</p> <p>On your local computer's terminal</p> <p>First, upload the file to CyVerse</p> <pre><code>gocmd put my_data.csv\n</code></pre> <p>You can verify it's there by listing your files</p> <pre><code>gocmd ls\n</code></pre> <p>Now the file is in the CyVerse Data Store, ready to be used in an analysis.</p> Other ways to move data to CyVerse <p>There are several ways to access the Data Store. These methods vary in speed, flexibility, and technical knowledge required. Different methods may suit your needs for different projects at different times.</p> Method Access Point OS Upload/Download Installation/Setup Required Account Required Max File Size Discovery Environment Web Any Both No Yes 2GB/file upload, no limit for import WebDAV Web &amp; Command line Any Both No Yes (No for public data) No limit GoCommands Command line Any Both Yes Yes (No for public data) No limit iCommands Command line Linux &amp; macOS Both Yes Yes (No for public data) No limit SFTP Desktop App &amp; Command line Any Both No (Yes for desktop app) Yes (No for public data) No limit Not Comfortable with the CLI yet? <p>That is totally okay! </p> <p>There are many GUI based ways to move data to CyVerse Data Store.</p> <ul> <li> <p>Discovery Environment</p> </li> <li> <p>CyberDuck</p> </li> <li> <p>FileZilla</p> </li> </ul>"},{"location":"cyverse/#cyverse-vm-file-system-layout-ubuntu","title":"CyVerse VM File System Layout (Ubuntu)","text":"<p>This diagram illustrates the typical file system structure you'll encounter in a CyVerse virtual machine.</p> <pre><code>graph TD\n    A[\"/ (root)\"]:::dir;\n\n    subgraph \"Standard Linux Directories\"\n        A --&gt; B[\"/home\"];\n    end\n\n    subgraph \"User Home Directory\"\n        B --&gt; C[\"/home/jovyan\"];\n    end\n\n    subgraph \"CyVerse Data (Mounted via Kubernetes)\"\n        A --&gt; D[\"/data-store (Physical Mount Point)\"];\n        D --&gt; D_Home[\"/data-store/home\"];\n        D --&gt; D_Shared[\"/data-store/shared\"];\n        D_Home --&gt; D_User[\"/data-store/home/&amp;lt;cyverse-username&amp;gt;&lt;br/&gt;(Personal Data)\"];\n        D_Shared --&gt; D_Community[\"Community &amp; Published Data\"];\n    end\n\n    subgraph \"Symbolic Link for Convenience\"\n         C --&gt; E[\"/home/jovyan/data-store&lt;br/&gt;(Symbolic Link)\"];\n    end\n\n    %% --- Links ---\n    E-.-&gt;|links to| D;\n\n    %% --- Styling ---\n    classDef dir fill:#e6f4ff,stroke:#6ba2d1,stroke-width:2px;\n    class A,B,C,D,D_Home,D_Shared,D_User,D_Community,E dir;</code></pre> <p>Diagram Key</p> <p>Solid Lines (<code>--&gt;</code>): Represent a direct parent-child relationship in the file system (e.g., /home is inside /).</p> <p>Dotted Lines (<code>-.-&gt;</code>): Represent a symbolic link. The <code>/home/jovyan/data-store</code> folder is a shortcut that points directly to the <code>/data-store</code> mount point.</p> <p><code>/data-store</code>: This is not a normal directory. It's a special mount point managed by Kubernetes, connecting your virtual machine to the main CyVerse Data Store.</p>"},{"location":"cyverse/#launching-a-virtual-machine-in-the-de","title":"Launching a Virtual Machine in the DE","text":"<p>Now that your data is in the cloud, you can launch a virtual machine to work with it. We recommend starting with a Cloud Shell, or Jupyter Lab, as both provide a user-friendly interface with a built-in terminal.</p>"},{"location":"cyverse/#log-in-to-the-cyverse-discovery-environment","title":"Log in to the CyVerse Discovery Environment.","text":"<p>Click the Apps button to open the Apps window.</p> <p>Search for a \"Jupyter Lab\" and select the latest version.</p> <p>On the App page, you can give your analysis a name. For now, the default settings are fine.</p> <p>Click Launch Analysis. Your App will take a few moments to start.</p> <p>Once the status says \"Running,\" click the hyperlink for your analysis. A new browser tab will open with your Jupyter Lab session.</p> <p>The Gateway to Commands: The Terminal All actions from this point forward will be performed inside the terminal of your CyVerse virtual machine.</p> <p>To Open the Terminal in Jupyter Lab: Click the File menu -&gt; New -&gt; Terminal.</p> <p>You will see a window with a prompt, waiting for your commands. This is the Shell.</p>"},{"location":"cyverse/#file-system-navigation","title":"File System Navigation","text":"<p>The commands for navigating the file system in your VM are the same standard Unix commands you would use elsewhere.</p> <p>| Command | Explanation | | <code>pwd</code> | print working directory (shows you where you are) | | <code>ls -F</code> | list the contents of a directory with file-type indicators (/ for dir) | | <code>cd &lt;directory&gt;</code> | change directory | | <code>mkdir &lt;directory&gt;</code> | make a new directory | | <code>mv &lt;source&gt; &lt;destination&gt;</code> | move or rename a file or directory | | <code>rm &lt;file&gt;</code> | remove (delete) a file |</p> <p>First, you'll need to get the data you uploaded with gocmd from the Data Store into your running VM. For this, we use <code>gocmd get</code>  to move files.</p>"},{"location":"cyverse/#in-your-cyverse-vm-terminal","title":"In your CyVerse VM Terminal","text":""},{"location":"cyverse/#download-the-file-from-the-data-store-to-your-vm","title":"Download the file from the Data Store to your VM","text":"<pre><code>cd\n\ngocmd get --progress /iplant/home/shared/geri/geri-neon-workshop\n</code></pre> <p>The <code>get</code> command tells the <code>gocmd</code> program to \"get\" or download data. the <code>--progress</code> command tells the program to print out verbose updates as the download runs.</p> <p>Now you can see it in your VM's file system</p> <pre><code>ls -F\n</code></pre> <p>Is the <code>geri-neon-workshop/</code> folder there? What do you see?</p>"},{"location":"cyverse/#create-a-reproducible-python-environment-with-a-package-manager","title":"Create a reproducible Python environment with a package manager","text":"<p>To ensure your analysis is reproducible, you should define the exact software and versions you need. We can do this using a Conda environment managed by <code>mamba</code>, a fast implementation of the <code>conda</code> package manager.</p> <p>We will define our environment in a special file called <code>environment.yaml</code></p> <ol> <li>Create the Environment File In your terminal, create the file using the nano text editor:</li> </ol> <pre><code>cd ~/geri-neon-workshop/sample-data\nls -F\ncat cowsay.yml\n</code></pre> <pre><code># environment.yml\n# This file defines the Conda environment for the CLI art app.\n#\n# To create the environment, run:\n# conda env create -f environment.yml\n# To activate the environment, run:\n# conda activate cli_art_env\n#\n# IMPORTANT: This app also requires the following command-line tools\n# which should be installed with your system's package manager:\n#\n# On Debian/Ubuntu (using apt-get):\n#   sudo apt-get update\n#   sudo apt-get install cowsay fortune lolcat\n#\n# On macOS (using Homebrew):\n#   brew install cowsay fortune lolcat\n#\n# On Fedora/CentOS (using dnf):\n#   sudo dnf install cowsay fortune-mod lolcat\n\nname: cowsay\n\nchannels:\n  - conda-forge\n  - defaults\n\ndependencies:\n  - python=3.9\n  - pip\n  - rich\n</code></pre> Conda vs Mamba <p>Conda is the original, industry-standard, open-source system for managing packages and environments for any language. It is robust and widely trusted.</p> <p>Mamba is a re-implementation of the <code>conda</code> package manager in C++. It uses the same commands and configuration but dramatically improves speed by using parallel processing for downloading packages and a much faster dependency solver. For our purposes, it is a drop-in replacement for <code>conda</code> that will make setting up our environments much faster.</p> <p>You might also be familiar with <code>pip</code>, Python's standard package manager, which installs packages from the Python Package Index (PyPI). While Conda/Mamba can manage packages for any language and even the Python interpreter itself, <code>pip</code> is exclusively for Python. It's common to use <code>pip</code> to install a package inside a Conda environment if that package isn't available on Conda channels. The general rule is to use Conda/Mamba whenever possible, and then use <code>pip</code> for any remaining Python-specific packages.</p> <ol> <li>Build and Activate the Environment</li> </ol> <p>Now, use <code>mamba</code> to create the environment from your file.</p> <pre><code>mamba env create -f cowsay.yml\n</code></pre> <p>Approve the installation</p> <p>Mamba will download and install the specified packages. Once it's finished, you can activate your new environment to start using it.</p> <pre><code>conda activate cowsay\n</code></pre> <p>Your terminal prompt should now change to show (plotting_env), indicating that you are inside the environment. Any command you run will use the software installed there.</p> <p>To exit the environment, simply run:</p> <pre><code>conda deactivate\n</code></pre>"},{"location":"cyverse/#run-the-app","title":"Run the app","text":"<p>After you've activated the new conda environment, run the app.</p> <pre><code>python cowsay.py\n</code></pre> <p>What happens?</p>"},{"location":"cyverse/#managing-analyses","title":"Managing Analyses","text":"<p>In the https://de.cyverse.org/analyses you can view your running or completed analyses.</p> <p>Your analysis should have an active timer counting down, if it is still active. You can extend the time by clicking on the ellipses and selecting extend time.</p> <p>You can also terminate your app by clicking on the red X. </p> <p>Note: apps will time out on their own, but they will burn your valuable allocation hours if left running.</p> <p>Practice shutting down your app by clicking on the check box and terminating it.</p>"},{"location":"cyverse/#jupyter-lab-gpus-w-ollama","title":"Jupyter Lab GPUs w/ Ollama","text":"<p>Start a new App. </p> <p>In Apps, https://de.cyverse.org/apps choose a Jupyter Lab Pytorch GPU</p> <p>Waiting for apps to start</p> <p>When you start an interactive application expect to wait a minute or two. It should not take more than 5 minutes to start an Featured application -- private apps may take longer because their Docker container must be downloaded from an external registry into CyVerse.</p>"},{"location":"cyverse/#run-your-own-ai-model-with-ollama","title":"Run Your Own AI Model with Ollama","text":"<p>For advanced tasks, CyVerse offers Apps with Graphics Processing Units (GPUs), which are essential for AI and machine learning. These GPU-enabled Apps come with Ollama pre-installed. Ollama lets you easily run powerful, open-source Large Language Models (LLMs) locally within your private session.</p> <ol> <li>Download an AI Model To use a model, you first need to download it. We'll use <code>gemma:2b</code>, a relatively small but capable model from Google. This command only needs to be run once per VM.</li> </ol>"},{"location":"cyverse/#in-your-cyverse-gpu-vm-terminal","title":"In your CyVerse GPU VM Terminal","text":"<ol> <li> <p>Open a Terminal in your Jupyter Lab</p> <p>Install a small Gemma model from the Ollama registry:</p> <pre><code># Install Ollama\npip install ollama\n# Start Ollama Server\nollama serve\n</code></pre> </li> <li> <p>Run the Model </p> <p>Open another terminal window.</p> <pre><code>ollama pull gemma:2b\n</code></pre> <p>Now you can run the model and interact with it directly from your command line.</p> <pre><code>ollama run gemma:2b\n</code></pre> <p>The prompt will change, and you can now ask the AI questions. Let's try one related to our last topic:</p> <pre><code>&gt;&gt;&gt; What is the purpose of a conda environment?\n</code></pre> <p>The model will generate a detailed explanation right in your terminal. To exit the Ollama session, type <code>/bye</code> and press Enter.</p> </li> </ol> <p>This gives you a powerful, private AI assistant that can help you write code, debug errors, and understand complex topics\u2014all within your secure CyVerse environment. We will explore this in much more detail in the next lesson!</p>"},{"location":"cyverse/#introductory-shell-commands","title":"Introductory Shell Commands","text":"<p>The following tutorial material was taken from the Carpentries Shell Module. </p> <p>Download Some Data from the Carpentries</p> <p>To follow along with the tutorial, please download and unzip this data. shell-lesson-data.zip </p> The Command Line Way to Download and Unzip! <p>Execute the following commands:</p> <pre><code>$ sudo apt install unzip\n$ wget https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip\n$ unzip shell-lesson-data.zip\n</code></pre> <p> </p>"},{"location":"cyverse/#more-carpentries-lessons-on-linux-command-line","title":"More Carpentries Lessons on Linux Command line","text":"<ul> <li>Pipes and Filters</li> <li>Loops</li> <li>Scripts</li> <li>Finding Things</li> </ul>"},{"location":"glossary/","title":"Glossary &amp; Acronyms","text":"<p>A</p> <ul> <li>action: automate a workflow in the context of CI/CD, see GitHub Actions</li> <li>agile: development methodology     for organizing a team to complete tasks organized over short periods     called 'sprints'</li> <li>allocation: portion of a resource assigned to a particular     recipient, typical unit is a core or node hour</li> <li>Anaconda: open source data science platform.     Anaconda.com</li> <li>application: also called an 'app', a software designed to help     the user to perform specific task</li> <li>awesome: a curated set of lists that provide insight into     awesome software projects on GitHub</li> <li>AVU: Attribute-Value-Unit a components for iRODS     metadata.</li> </ul> <p>B</p> <ul> <li>beta: a software version which is not yet ready for     publication but is being tested</li> <li>bash: Bash is the GNU Project's shell, the Bourne-Again     Shell</li> <li>biocontainer: a community-driven project that provides the     infrastructure and basic guidelines to create, manage and distribute     bioinformatics packages (e.g conda) and containers (e.g docker,     singularity)</li> <li>bioconda: a channel for the conda package manager specializing     in bioinformatics software</li> </ul> <p>C</p> <ul> <li>CLI: the UNIX shell command line interface,     most typically BASH</li> <li>command: a set of instructions sent to the computer, typically     in a typed interface</li> <li>conda: an installation type of the Anaconda data science     platform. Command line application for managing packages and     environments</li> <li>container: virtualization of an operating system run within an     isolated user space</li> <li>Continuous Integration: (CI) is testing automation to check that     the application is not broken whenever new commits are integrated     into the main branch</li> <li>Continuous Delivery: (CD) is an extension of 'continuous     integration' to make sure that you can release new changes in a     sustainable way</li> <li>Continuous Deployment: a step further than 'continuous     delivery', every change that passes all stages of your production     pipeline is released</li> <li>Continuous Development: a process for iterative software     development and is an umbrella over several other processes     including 'continuous integration', 'continuous testing',     'continuous delivery' and 'continuous deployment'</li> <li>Continuous Testing: a process of testing and automating software     development.</li> <li>CRAN: The Comprehensive R Archive     Network</li> <li>CyVerse tool: Software program that is integrated into the back     end of the DE for use in DE apps</li> <li>CyVerse app: graphic interface of a tool made available for use     in the DE</li> </ul> <p>D</p> <ul> <li>Debian: a free OS, base of other     Linux distributions such as Ubuntu</li> <li>Development: the environment on your computer where you write     code</li> <li>DevOps Software *Dev*elopment and information techology     *Op*erations techniques for shortening the time to change software     in relation to CI/CD</li> <li>Discovery Environment (DE): a data science workbench for running     executable, interactive, and high throughput applications in     CyVerse DE</li> <li>distribution: abbreviated as 'distro', an operating system     made from a software collection based upon the Linux kernel</li> <li>Docker: Docker is an open source     software platform to create, deploy and manage virtualized     application containers on a common operating system (OS), with an     ecosystem of allied tools. A program that runs and handles     life-cycle of containers and images</li> <li>DockerHub: an official registry of docker containers, operated     by Docker. DockerHub</li> <li>DOI: a digital object identifier. A persistant identifier     number, managed by the doi.org</li> <li>Dockerfile: a text document that contains all the commands you     would normally execute manually in order to build a Docker image.     Docker can build images automatically by reading the instructions     from a Dockerfile</li> </ul> <p>E</p> <ul> <li>environment: software that includes operating system, database     system, specific tools for analysis</li> <li>entrypoint: In a Dockerfile, an ENTRYPOINT is an optional     definition for the first part of the command to be run</li> </ul> <p>F</p> <ul> <li>FOSS: (1) Free and Open Source Software, (2)     Foundational Open Science Skills - this class!</li> <li>function: a named section of a program that performs a specific     task</li> </ul> <p>G</p> <ul> <li>git: a version control system software</li> <li>gitter: a Github based messaging service that uses markdown     gitter.im</li> <li>GitHub: a website for hosting <code>git</code> repositories - owned by     Microsoft GitHub</li> <li>GitLab: a website for hosting <code>git</code> repositories     GitLab</li> <li>GitOps: using <code>git</code> framework as a means of deploying     infrastructure on cloud using Kubernetes</li> <li>GPU: graphic processing unit</li> <li>GUI: graphical user interface</li> </ul> <p>H</p> <ul> <li>hack: a quick job that produces what is needed, but not well</li> <li>HPC: High Performance Computer, for large syncronous computation</li> <li>HTC: High Throughput Computer, for many parallel tasks</li> </ul> <p>I</p> <ul> <li>IaaS: Infrastructure as a Service.     online services that provide APIs</li> <li>iCommands: command line application for     accessing iRODS Data Store</li> <li>IDE: integrated development environment, typically a graphical     interface for working with code language or packages</li> <li>instance: a single virtul machine</li> <li>image: self-contained, read-only 'snapshot' of your applications     and packages, with all their dependencies</li> <li>iRODS: an open source integrated Rule-Oriented Data Management     System, iRODS.org</li> </ul> <p>J</p> <ul> <li>Java: programming language, class-based, object-oriented</li> <li>JavaScript: programming language</li> <li>JSON: Java Script Object Notation, data interchange format that     uses human-readable text</li> <li>Jupyter(Hub,Lab,Notebooks): an IDE, originally the     iPythonNotebook, operates in the browser Project     Jupyter</li> </ul> <p>K</p> <ul> <li>kernel: central component of most operating systems (OS)</li> <li>Kubernetes: an open source container orchestration platform     created by Google Kubernetes is often     referred to as <code>K8s</code></li> </ul> <p>L</p> <ul> <li>lib: a UNIX library</li> <li>linux: open source Unix-like operating system</li> </ul> <p>M</p> <ul> <li>makefile: a file containing a set of directives used by a make     build automation tool</li> <li>markdown: a lightweight markup language with plain text     formatting syntax</li> <li>metadata:: data about data, useful for searching and querying</li> <li>multi-thread: a process which runs on more than one CPU or GPU     core at the same time</li> <li>master node: responsible for deciding what runs on all of the     cluster's nodes. Can include scheduling workloads, like     containerized applications, and managing the workloads' lifecycle,     scaling, and upgrades. The master also manages network and storage     resources for those workloads</li> <li>Mac OS X: Apple's popular desktop OS</li> </ul> <p>N</p> <ul> <li>node: a computer, typically 1 or 2 core (with many threads)     server in a cloud or HPC center</li> </ul> <p>O</p> <ul> <li>ontology: formal naming and structural hierarchy used to     describe data, also called a knowledge     graph</li> <li>organization: a group, in the context of GitHub a place where     developers contribute code to repositories</li> <li>Operating System (OS): software that manages computer hardware,     software resources, and provides common services for computer     programs</li> <li>Open Science Grid (OSG): national, distributed computing     partnership for data-intensive research     opensciencegrid.org</li> <li>ORCID: Open Researcher and Contributor ID     (ORCiD), a persistent digital identifier that     distinguishes you from every other researcher</li> </ul> <p>P</p> <ul> <li>PaaS: Platform as Service run     and manage applications in cloud without complexity of developing it     yourself</li> <li>package: an app designed for a particular langauge</li> <li>package manager: a collection of software tools that automates     the process of installing, upgrading, configuring, and removing     computer programs for a computer's operating system in a consistent     manner</li> <li>Production: environment where users access the final code after     all of the updates and testing</li> <li>Python: interpreted, high-level, general-purpose programming     language Python.org</li> </ul> <p>Q</p> <ul> <li>QUAY.io: private Docker registry QUAY.io</li> </ul> <p>R</p> <ul> <li>R: data science programming language R Project</li> <li>recipe file: a file with installation scripts used for building     software such as containers, e.g. Dockerfile</li> <li>registry: a storage and content delivery system, such as that     used by Docker</li> <li>remote desktop: a VM with a graphic user interface accessed via     a browser</li> <li>repo(sitory): a directory structure for hosting code and data</li> <li>RST: ReStructuredText, a markdown type file</li> <li>ReadTheDocs: a web service for rendering documentation (that     this website uses) readthedocs.org and     readthedocs.com</li> <li>root: the administrative user on a linux kernel - use your     powers wisely</li> </ul> <p>S</p> <ul> <li>SaaS: Software as a Service web     based platform for using software</li> <li>schema: a metadata standard for labeling, tagging or coding for     recording &amp; cataloging information or structuring descriptive     records. see schema.org</li> <li>scrum: daily set of tasks and evalautions as part of a sprint.</li> <li>shell: is a command line interface program that runs other     programs (may be complex, technical programs or very simple programs     such as making a directory). These simple, stand-alone programs are     called commands</li> <li>Singularity: a container software, used widely on HPC, created     by SyLabs</li> <li>SLACK: Searchable Log of All Conversation and Knowledge, a team     communication tool slack.com</li> <li>sprint: set period of time during which specific work has to be     completed and made ready for review</li> <li>Singularity def file: (definition file) recipe for building a     Singualrity container</li> <li>Stage: environment that is as similar to the production     environment as can be for final testing</li> </ul> <p>T</p> <ul> <li>tar: software utility for collecting many files into one archive     file, often referred to as a tarball</li> <li>tensor: algebraic object that describes a linear mapping from     one set of algebraic objects to another</li> <li>terminal: a windowed emulator for directly enterinc commands to     a computer</li> <li>thread: a CPU process or a series of linked messages in a     discussion board</li> <li>tool: In the context of CyVerse Discovery Environment, a Docker     Container</li> <li>TPU: tensor processing unit</li> <li>Travis: Travis-CI, a continuous     integration software</li> </ul> <p>U</p> <ul> <li>Ubuntu: most popular Linux OS     distribution, based on Debian</li> <li>UNIX: operating system</li> <li>user: the profile under which applications are started and run,     <code>root</code> is the most powerful system administrator</li> </ul> <p>V</p> <ul> <li>VICE: Visual Interactive Computing     Environment -     Cyverse Data Science Workbench</li> <li>virtual machine: is a software computer that, like a physical     computer, runs an operating system and applications</li> </ul> <p>W</p> <ul> <li>waterfall: software development broken into linear sequential     phases, similar to a Gantt chart</li> <li>webGL: JavaScript API for rendering interactive 2D and 3D     graphics within any compatible web browser without the use of     plug-ins</li> <li>Windows: Microsoft's most popular desktop OS</li> <li>workspace: (vs. repo)</li> <li>worker node: A cluster typically has one or more nodes, which     are the worker machines that run your containerized applications and     other workloads. Each node is managed from the master, which     receives updates on each node's self-reported status.</li> </ul> <p>X</p> <ul> <li>XML: Extensible Markup Language, data interchange format that     uses human-readable text</li> </ul> <p>Y</p> <ul> <li>YAML: YAML Ain't Markup Language, data interchange format that     uses human-readable text</li> </ul> <p>Z</p> <ul> <li>ZenHub: team collaboration solution built directly into GitHub     that uses kanban style boards</li> <li>Zenodo: general-purpose open-access repository developed under     the European OpenAIRE program and operated by CERN</li> <li>zip: a compressed file format</li> <li>zsh: Z-Shell, now the default shell on     new Mac OS X</li> </ul>"},{"location":"installation/","title":"Setup","text":"<p>To get you ready to hit the ground running, please set up the prerequisite accounts and software listed below before the course starts.</p>"},{"location":"installation/#cyverse-account-creation","title":"CyVerse Account Creation","text":"<p>We will be using several services that require you to create a user account.</p> Account Notes  GitHub GitHub will be used to store lecture materials and your own work. We will use GitHub Education and its free features for hands-on. CyVerse When creating your account, use the same email address you provided to NCEMS"},{"location":"installation/#sign-up-for-workshop","title":"Sign up for Workshop","text":"<p>After creating your CyVerse Account (see above), enroll yourself in the workshop: https://user.cyverse.org/workshops/194.</p> <p>This will enable CyVerse's data science workbench, the Discovery Environment, and its interactive Applications in VICE</p>"},{"location":"installation/#required-software","title":"Required Software","text":"<p>You will need to have the following software installed on your personal computer:</p> Software Notes Web Browser  Chrome or  Firefox Text Editor  VS Code <p>Attention  Windows users</p> <p>Much of what we are going to be teaching is based on open-source software which operates on cloud and is incompatible within Windows OS. Don't worry</p> <p>Unix-based systems such as Linux  Ubuntu and  MacOS X, as many scientific tools require a Unix Operating System (OS). </p> <p>There are a number of software that allow Windows users to execute Unix commands, however we recommend the use of  Windows Subsystem for Linux (WSL) 2.0.</p> <p> VS Code is a Microsoft product and integrates seamlessly with Unix systems, we therefore strongly encourage you to install Code on your Windows OS.</p>"},{"location":"vibe/","title":"Basics of Prompt Engineering","text":"<p>This work is licensed under a Creative Commons Attribution 4.0 International License.</p> <p>CyVerse Full Prompt Engineering Workshop</p>"},{"location":"vibe/#local-llms-vs-apis","title":"Local LLMs vs APIs","text":""},{"location":"vibe/#cyverse-verde","title":"CyVerse Verde","text":""},{"location":"vibe/#managing-api-keys","title":"Managing API keys","text":""},{"location":"vibe/#extension-installation","title":"Extension Installation","text":"<ol> <li>Open VS Code.</li> <li>Navigate to the Extensions view by clicking the  icon in the Activity Bar on the side of the window or by pressing <code>Ctrl+Shift+X</code> (Windows/Linux) or <code>Cmd+Shift+X</code> (macOS).</li> <li>In the search bar, type \"Roo Code\" (or \"Cline\" if Roo Code isn't listed and you're using vanilla Cline).</li> <li>Find the official extension from the search results and click Install.</li> <li>Once installed, you might need to reload VS Code if prompted.</li> </ol>"},{"location":"vibe/#selecting-an-api","title":"Selecting an API","text":"<p>After installation, you'll typically need to configure an LLM API endpoint and key. Look for settings related to Roo Code or Cline in VS Code's settings (<code>Ctrl+,</code> or <code>Cmd+,</code>).</p>"},{"location":"vibe/#google-gemini","title":"Google Gemini","text":"<ol> <li>Obtain your Google Gemini API key from Google AI Studio or Google Cloud Console.</li> <li>In VS Code settings, search for \"Roo Code Gemini\" or a similar setting.</li> <li>Enter your API key in the designated field (e.g., <code>Roo Code: Gemini API Key</code>).</li> <li>You might also need to specify the model (e.g., <code>gemini-pro</code>).</li> </ol>"},{"location":"vibe/#ollama-for-local-models","title":"Ollama (for Local Models)","text":"<p>Ollama allows you to run open-source LLMs locally.</p> <ol> <li>Ensure Ollama is installed and running on your machine with the desired models downloaded (e.g., <code>ollama pull gemma:2b</code>).</li> <li>In VS Code settings for Roo Code/Cline, look for an option to specify the Ollama API endpoint. This is usually <code>http://localhost:11434</code> by default.</li> <li>Select or specify the Ollama model you wish to use (e.g., <code>gemma</code>, <code>llama3</code>, <code>codellama</code>). No API key is typically needed for local Ollama usage directly, but the extension must be configured to point to the local server.</li> </ol>"},{"location":"vibe/#openai-compatible","title":"OpenAI Compatible","text":"<p>This is for services that adhere to the OpenAI API specification, which can include OpenAI itself or other providers like Azure OpenAI or local LLM servers.</p> <ol> <li>Obtain your API key and API base URL (endpoint) from your provider.<ul> <li>For OpenAI: Key from platform.openai.com. Endpoint is typically <code>https://api.openai.com/v1</code>.</li> <li>For Azure OpenAI: Key and endpoint from your Azure deployment.</li> <li>For others: Refer to your provider's documentation.</li> </ul> </li> <li>In VS Code settings for Roo Code/Cline:<ul> <li>Enter the API key (e.g., <code>Roo Code: OpenAI API Key</code>).</li> <li>Enter the API base URL if it's different from the default (e.g., <code>Roo Code: OpenAI API Base URL</code>).</li> <li>Select the desired model (e.g., <code>gpt-4o</code>, <code>gpt-3.5-turbo</code>).</li> </ul> </li> </ol>"},{"location":"vibe/#claude-via-api","title":"Claude (via API)","text":"<p>If Roo Code/Cline supports direct Claude API integration (distinct from the Claude Desktop app):</p> <ol> <li>Obtain your Anthropic API key from the Anthropic Console.</li> <li>In VS Code settings for Roo Code/Cline, search for \"Roo Code Claude\" or a similar setting.</li> <li>Enter your API key (e.g., <code>Roo Code: Claude API Key</code>).</li> <li>Specify the Claude model you wish to use (e.g., <code>claude-3-opus-20240229</code>).</li> </ol> <p>Restart for Changes</p> <p>After changing API settings, it's often a good idea to restart VS Code or the extension itself if it provides such an option, to ensure the new settings take effect.</p>"},{"location":"vibe/#setting-up-github-copilot-on-vs-code-locally","title":"Setting up GitHub Copilot on VS Code Locally","text":"<p>GitHub Copilot is deeply integrated into the GitHub ecosystem and VS Code (local).</p>"},{"location":"vibe/#in-github-codespaces","title":"In GitHub CodeSpaces","text":"<ol> <li>Enable Copilot for your account: Ensure you have an active GitHub Copilot subscription associated with your GitHub account.</li> <li>Launch a CodeSpace: When you create or open a repository in GitHub CodeSpaces, Copilot is often enabled by default if your account has access.</li> <li>Check Status: Look for the Copilot icon  in the status bar at the bottom of the VS Code interface within CodeSpaces. If it's not active, click it to see options or troubleshoot. You might need to authorize it for the specific CodeSpace.</li> </ol>"},{"location":"vibe/#extension-installation-in-vs-code-desktop","title":"Extension Installation in VS Code (Desktop)","text":"<ol> <li>Open VS Code.</li> <li>Navigate to the Extensions view ( or <code>Ctrl+Shift+X</code> / <code>Cmd+Shift+X</code>).</li> <li>Search for \"GitHub Copilot\".</li> <li>Find the official extension by GitHub and click Install.</li> <li>Sign In: After installation, VS Code will prompt you to sign in with your GitHub account. Follow the prompts to authorize VS Code to use GitHub Copilot.<ul> <li>If you're not prompted, you can often click the user icon in the bottom left of VS Code and sign in there, or find a \"Sign In to GitHub Copilot\" command in the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>).</li> </ul> </li> <li>Once signed in and with an active subscription, Copilot will be ready to assist you. You'll see its icon  in the status bar.</li> </ol>"},{"location":"vibe/#vibe-coding","title":"Vibe Coding","text":"<p>Vibe coding refers to using an LLM to generate and edit code directly within your IDE (e.g., VS Code). This approach allows for a more fluid and interactive coding experience, where the LLM acts as a collaborative partner.</p> <p>Allowing an LLM to execute code on your computer may be a violation of institutional security and privacy policy</p> <p>Coding tools like Cline and Windsurf give you the option to allow 'execution' of code on your machine. </p> <p>You must understand the implications of giving these LLMs the authority to execute code on your computer and the network it is running upon.</p> <p>Malicious code lives on the internet, and your Vibing LLM might install it while you're not paying attention</p> <p>Read more:  Vibe Check: False Packages A New LLM Security Risk (Note: This is a fictional link as per the example for demonstration).</p>"},{"location":"vibe/#vibe-coding-platforms","title":"Vibe Coding Platforms","text":"Emoji Meaning VS Code GitHub CodeSpace Apple OS Windows Command Line Interface Open Source Licensed API based <ul> <li> Aider      A popular command-line tool for AI-driven coding, often used with local or remote LLMs.</li> <li> Claude Desktop      An easy-to-install desktop platform that connects to Anthropic's powerful LLM API, and allows you to connect to MCP servers.</li> <li> Cursor      A popular standalone fork of VS Code, focused on integrating new models with stability and offering a flat-fee pricing model.</li> <li> GitHub Copilot      Integrated with VS Code and GitHub CodeSpaces, provides agentic coding with periodic performance fluctuations and tiered pricing.</li> <li> Cline      Open-source and model-agnostic, pioneering features like \u201cbring your own model\u201d (BYOM) and operating on a per-request billing structure.</li> <li> Roo Code      Derived from Cline, prioritizes rapid feature development and customization, serving users interested in experimental capabilities.</li> <li> Windsurf      Offers similar agentic and inline features with tiered pricing and a \u201cjust works\u201d usability orientation.</li> </ul>"},{"location":"vibe/#introduction-to-prompt-engineering","title":"Introduction to Prompt Engineering","text":"<p>Prompt Engineering is a technique of crafting effective instructions using AI large language models. With modern AI-powered tools like Claude Desktop, ChatGPT, Gemini, and NotebookLM offering capabilities to upload documents, search the web, and process multiple file types, mastering prompt engineering has become essential for productive AI interactions.</p> <p>What You'll Learn</p> <ul> <li>Fundamentals: How AI models process and respond to prompts</li> <li>Modern Features: Leveraging document uploads, web search, and multi-modal inputs</li> <li>Best Practices: Structured approaches to writing effective prompts</li> <li>Advanced Techniques: Context management, chaining, and custom instructions</li> </ul>"},{"location":"vibe/#understanding-modern-ai-capabilities","title":"Understanding Modern AI Capabilities","text":""},{"location":"vibe/#core-features-of-todays-ai-tools","title":"Core Features of Today's AI Tools","text":"<p>Modern AI assistants have evolved beyond simple text chat:</p> Feature  Claude  ChatGPT  Gemini NotebookLM  CoPilot Document Upload PDFs, text, code PDFs, images, data PDFs, images, GDrive PDFs, Google Docs PDFs, OneDrive Web Search Via MCP Yes Yes Yes Yes Context Window (tokens) 200K 128K 2M Document-based 128K File Analysis Yes Yes Yes Deep analysis Yes Code Execution Yes (MCP) Yes Yes No Yes"},{"location":"vibe/#how-ai-models-process-your-input","title":"How AI Models Process Your Input","text":"<p>The Processing Pipeline</p> <ol> <li>Tokenization: Your prompt is broken into smaller units (tokens)</li> <li>Context Assembly: Uploaded documents and conversation history are included</li> <li>Attention Mechanism: The model identifies relevant information</li> <li>Generation: Response is produced token by token</li> <li>Formatting: Output is structured according to your specifications</li> </ol>"},{"location":"vibe/#getting-started-basic-prompt-structure","title":"Getting Started: Basic Prompt Structure","text":""},{"location":"vibe/#the-foundation-clear-instructions","title":"The Foundation: Clear Instructions","text":"<p>Start with simple, direct prompts before advancing to complex techniques:</p> <pre><code># Basic Prompt\n\"Summarize this research paper in 3 bullet points\"\n</code></pre> <pre><code># Better Prompt\n\"As a research scientist, summarize the key findings from this paper \nin 3 bullet points, focusing on methodology and results\"\n</code></pre> <pre><code># Best Prompt\n\"You are a research scientist reviewing papers for a journal. \nSummarize the attached PDF in 3 bullet points that cover:\n1. Research question and hypothesis\n2. Methodology and sample size\n3. Key findings and limitations\nFormat as a bullet list with sub-points for clarity.\"\n</code></pre>"},{"location":"vibe/#working-with-documents","title":"Working with Documents","text":"<p>Modern AI tools excel at document analysis. Here's how to maximize their potential:</p> <p>Document Upload Best Practices</p> <ul> <li>Specify the document: \"In the attached PDF...\" or \"Based on the uploaded spreadsheet...\"</li> <li>Direct attention: \"Focus on Section 3.2 of the document\"</li> <li>Request specific outputs: \"Create a table comparing the methods described in chapters 2 and 5\"</li> <li>Combine multiple sources: \"Compare the findings in these three papers\"</li> </ul>"},{"location":"vibe/#example-multi-document-analysis","title":"Example: Multi-Document Analysis","text":"<pre><code>I've uploaded three research papers on climate change. Please:\n\n1. Create a comparison table with columns for:\n   - Paper title and authors\n   - Methodology\n   - Key findings\n   - Limitations\n\n2. Identify common themes across all papers\n\n3. Highlight any contradictory findings\n\nFormat the response with clear headers and use markdown tables.\n</code></pre>"},{"location":"vibe/#the-craft-framework","title":"The CRAFT Framework","text":"<p>For consistent, high-quality results, use the CRAFT framework:</p>"},{"location":"vibe/#context","title":"Context","text":"<p>Provide background information and set the scene</p>"},{"location":"vibe/#role","title":"Role","text":"<p>Define who the AI should act as</p>"},{"location":"vibe/#action","title":"Action","text":"<p>Specify exactly what you want done</p>"},{"location":"vibe/#format","title":"Format","text":"<p>Describe how the output should be structured</p>"},{"location":"vibe/#tone","title":"Tone","text":"<p>Indicate the style and voice to use</p>"},{"location":"vibe/#craft-example","title":"CRAFT Example","text":"<pre><code>Context: I'm preparing a grant proposal for NSF funding on AI in education\n\nRole: Act as an experienced grant writer and education researcher\n\nAction: Review my draft introduction and suggest improvements\n\nFormat: Provide feedback as tracked changes with explanations\n\nTone: Professional, constructive, and encouraging\n</code></pre>"},{"location":"vibe/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"vibe/#1-custom-instructions-and-system-prompts","title":"1. Custom Instructions and System Prompts","text":"<p>Modern AI platforms allow you to set persistent instructions:</p> <p>'Custom Instructions' or 'System Instructions'</p> <p>Platforms like Gemini and Claude allow you to add \"Custom Instructions\" or \"System Instructions\" as prior prompts, which act as a global rule to subsequent prompt chaining.</p> <p>For example:</p> <pre><code># Project Context\nI'm a data scientist working on machine learning projects.\nAlways provide Python code examples using scikit-learn and pandas.\nInclude docstrings and type hints in all code.\n\n# Response Preferences\n- Be concise but thorough\n- Explain complex concepts with analogies\n- Always cite sources when making factual claims\n</code></pre>"},{"location":"vibe/#2-leveraging-web-search","title":"2. Leveraging Web Search","text":"<p>Most featured GPTs now feature a web browse or search engine capability.</p> <p>Enabling search allows the GPT to use document retrieval on websites and PDFs when reasoning out its response.</p> <pre><code>Search for the latest research on the public health benefits of vaccination published in 2024. \n\nFocus on:\n- Papers from top conferences (AHA, ASPPH, NRHA, ICFMDP)\n- mRNA\n- Bird Flu and COVID\n\nSummarize the top 5 papers with links to the originals.\n</code></pre>"},{"location":"vibe/#3-multi-modal-prompting","title":"3. Multi-Modal Prompting","text":"<p>Combine different input types for richer interactions:</p> <pre><code>I've uploaded:\n1. A screenshot of my dashboard\n2. The underlying data in CSV format\n3. Our brand guidelines PDF\n\nCreate a redesigned dashboard that:\n- Improves data visualization based on best practices\n- Adheres to our brand colors and fonts\n- Highlights the KPIs mentioned in the data dictionary\n</code></pre>"},{"location":"vibe/#4-prompt-chaining","title":"4. Prompt Chaining","text":"<p>Build complex outputs through sequential prompts:</p> <p>Effective Chaining Strategy</p> <ol> <li>Start broad: \"Outline a research paper on sustainable AI\"</li> <li>Zoom in: \"Expand section 3 on energy-efficient training methods\"</li> <li>Refine: \"Add citations and make the tone more academic\"</li> <li>Polish: \"Format according to IEEE standards\"</li> </ol>"},{"location":"vibe/#5-using-examples-few-shot-learning","title":"5. Using Examples (Few-Shot Learning)","text":"<p>Provide examples to guide the AI's output:</p> <pre><code>I need to classify customer feedback. Here are examples:\n\n\"The product arrived damaged\" \u2192 Category: Shipping Issue\n\"Can't log into my account\" \u2192 Category: Technical Support\n\"Love the new features!\" \u2192 Category: Positive Feedback\n\nNow classify these:\n1. \"The app keeps crashing on startup\"\n2. \"Best purchase I've made this year\"\n3. \"Package was left in the rain\"\n</code></pre>"},{"location":"vibe/#practical-applications","title":"Practical Applications","text":""},{"location":"vibe/#research-and-analysis","title":"Research and Analysis","text":"<pre><code>Analyze the attached dataset (CSV) and:\n1. Identify statistical patterns and outliers\n2. Create visualizations for the top 3 insights\n3. Write a methods section describing the analysis\n4. Suggest additional analyses based on the data\n\nUse pandas profiling techniques and create matplotlib visualizations.\nInclude code that I can run locally.\n</code></pre>"},{"location":"vibe/#writing-and-editing","title":"Writing and Editing","text":"<pre><code>I've uploaded my draft manuscript. Please:\n\n1. Check for consistency in terminology throughout\n2. Ensure all figures are referenced in the text\n3. Verify the citation format matches APA 7th edition\n4. Highlight any unclear passages\n5. Suggest improvements for flow between sections\n\nProvide a tracked-changes version and a summary of major edits.\n</code></pre>"},{"location":"vibe/#code-development","title":"Code Development","text":"<pre><code>Based on the uploaded requirements document:\n\n1. Create a Python class structure for the described system\n2. Include comprehensive docstrings and type hints\n3. Add unit tests for each method\n4. Create a README with installation and usage instructions\n5. Follow PEP 8 style guidelines\n\nUse modern Python features (3.10+) and include error handling.\n</code></pre>"},{"location":"vibe/#common-pitfalls-and-solutions","title":"Common Pitfalls and Solutions","text":""},{"location":"vibe/#pitfall-1-vague-instructions","title":"Pitfall 1: Vague Instructions","text":"<p>\u274c Poor: \"Make this better\"</p> <p>\u2705 Better: \"Improve this abstract by making it more concise (under 250 words), adding keywords, and ensuring it follows the journal's structure: background, methods, results, conclusions\"</p>"},{"location":"vibe/#pitfall-2-information-overload","title":"Pitfall 2: Information Overload","text":"<p>\u274c Poor: Uploading 50 documents without guidance</p> <p>\u2705 Better: \"Focus on documents 1-3 which contain the methodology. Ignore the appendices.\"</p>"},{"location":"vibe/#pitfall-3-assuming-knowledge","title":"Pitfall 3: Assuming Knowledge","text":"<p>\u274c Poor: \"Fix the usual issues\"</p> <p>\u2705 Better: \"Check for: passive voice, sentences over 25 words, undefined acronyms, and missing Oxford commas\"</p>"},{"location":"vibe/#pitfall-4-no-output-format","title":"Pitfall 4: No Output Format","text":"<p>\u274c Poor: \"Summarize this\"</p> <p>\u2705 Better: \"Create an executive summary with:  - 3-sentence overview - 5 key points as bullets - 1 paragraph on implications - Formatted with markdown headers\"</p>"},{"location":"vibe/#quick-reference-card","title":"Quick Reference Card","text":"<p>Prompt Engineering Checklist</p> <ul> <li> Clear objective: What do you want to achieve?</li> <li> Context provided: Background information included?</li> <li> Role defined: Who should the AI act as?</li> <li> Specific action: Exact task described?</li> <li> Output format: Structure specified?</li> <li> Examples given: For complex tasks?</li> <li> Constraints noted: Length, style, or content limits?</li> <li> Documents referenced: If using uploads?</li> <li> Follow-up planned: For iterative improvement?</li> </ul>"},{"location":"vibe/#assessment-questions","title":"Assessment Questions","text":"How do modern AI tools handle uploaded documents? <p>Answer</p> <p>Modern AI tools process uploaded documents by:</p> <ul> <li> <p>Converting them to text (OCR for images/PDFs)</p> </li> <li> <p>Adding them to the context window</p> </li> <li> <p>Allowing specific references (\"In section 2.3...\")</p> </li> <li> <p>Enabling cross-document analysis</p> </li> <li> <p>Maintaining document structure awareness</p> </li> </ul> What's the most important element of an effective prompt? <p>Answer</p> <p>Clarity of instruction is paramount. The AI needs to understand:</p> <ul> <li> <p>What you want done (action)</p> </li> <li> <p>How you want it done (format)</p> </li> <li> <p>Why you want it done (context)</p> </li> </ul> <p>Without clear instructions, even the most advanced AI will produce suboptimal results.</p> How can you ensure consistent outputs across multiple sessions? <p>Answer</p> <ol> <li> <p>Use custom instructions (ChatGPT, Claude) or system prompts</p> </li> <li> <p>Create templates for common tasks</p> </li> <li> <p>Save successful prompts for reuse</p> </li> <li> <p>Use platform features like GPTs or Projects</p> </li> <li> <p>Include examples in your prompts</p> </li> <li> <p>Specify exact formats with templates</p> </li> </ol> True or False: Longer prompts always produce better results <p>False</p> <p>Prompt quality matters more than length. A well-structured, concise prompt often outperforms a lengthy, unfocused one. However, providing sufficient context and clear instructions is important. Aim for:</p> <ul> <li> <p>Completeness over brevity</p> </li> <li> <p>Clarity over complexity</p> </li> <li> <p>Structure over stream-of-consciousness</p> </li> </ul>"},{"location":"vibe/#further-resources","title":"Further Resources","text":"<ul> <li> <p> Anthropic's Prompt Engineering Guide</p> </li> <li> <p> OpenAI's Best Practices</p> </li> <li> <p> Google's Gemini Prompting Strategies</p> </li> <li> <p> Awesome ChatGPT Prompts</p> </li> <li> <p>Learn Prompting Online Courses</p> </li> </ul>"}]}